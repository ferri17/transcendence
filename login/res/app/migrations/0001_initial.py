# Generated by Django 5.1.1 on 2024-09-30 16:33

import app.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('alias', models.CharField(max_length=50, unique=True)),
                ('intra', models.BooleanField()),
                ('campus', models.CharField(blank=True, max_length=100, null=True)),
                ('img', models.ImageField(blank=True, null=True, upload_to='img_profile/')),
                ('intra_id', models.CharField(max_length=50, null=True, unique=True)),
                ('is_ai', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserStatus',
            fields=[
                ('users', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('is_online', models.BooleanField(default=False)),
                ('last_seen', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'userstatus',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('final_score', models.CharField(blank=True, max_length=100, null=True)),
                ('datetourn', models.DateTimeField(auto_now_add=True)),
                ('state', models.CharField(choices=[('registering', 'Registering'), ('ongoing', 'Ongoing'), ('finished', 'Finished')], default='registering', max_length=50)),
                ('size', models.IntegerField(choices=[(4, '4'), (8, '8')], default=4)),
                ('n_registered', models.IntegerField(default=0)),
                ('n_humans', models.IntegerField(default=1)),
                ('hexblock', models.CharField(blank=True, max_length=100, null=True)),
                ('genId', models.CharField(editable=False, max_length=100, unique=True)),
                ('runner_up', models.ForeignKey(blank=True, db_column='runneruprid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='loser', to=settings.AUTH_USER_MODEL)),
                ('winner', models.ForeignKey(blank=True, db_column='winnerid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='winner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tournament',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='WaitRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genId', models.CharField(editable=False, max_length=36, unique=True)),
                ('expire_at', models.DateTimeField(default=app.models.default_expire_at)),
                ('attendee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attending_room', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owner_room', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'waitroom',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Friends',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('pending', models.BooleanField(default=True)),
                ('usersid1', models.ForeignKey(db_column='usersid1', on_delete=django.db.models.deletion.CASCADE, related_name='friends_as_user1', to=settings.AUTH_USER_MODEL)),
                ('usersid2', models.ForeignKey(db_column='usersid2', on_delete=django.db.models.deletion.CASCADE, related_name='friends_as_user2', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'friends',
                'managed': True,
                'unique_together': {('usersid1', 'usersid2')},
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_date', models.DateTimeField(auto_now_add=True)),
                ('score_p1', models.IntegerField(default=0)),
                ('score_p2', models.IntegerField(default=0)),
                ('state', models.CharField(choices=[('waiting', 'Waiting'), ('playing', 'Playing'), ('finished', 'Finished')], default='waiting', max_length=100)),
                ('game_id', models.CharField(editable=False, max_length=36)),
                ('round', models.IntegerField(blank=True, default=0, null=True)),
                ('next_match', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.match')),
                ('player1', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='game_player1', to=settings.AUTH_USER_MODEL)),
                ('player2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='game_player2', to=settings.AUTH_USER_MODEL)),
                ('tournament', models.ForeignKey(blank=True, db_column='tournamentid', null=True, on_delete=django.db.models.deletion.CASCADE, to='app.tournament')),
            ],
            options={
                'db_table': 'match',
                'ordering': ['game_date'],
                'managed': True,
                'unique_together': {('player1', 'player2', 'game_date', 'tournament')},
            },
        ),
        migrations.CreateModel(
            name='Tourparticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_eliminated', models.BooleanField(default=False)),
                ('tournament', models.ForeignKey(db_column='tournamentid', on_delete=django.db.models.deletion.CASCADE, to='app.tournament')),
                ('userid', models.ForeignKey(db_column='usersid', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tourparticipation',
                'managed': True,
                'unique_together': {('userid', 'tournament')},
            },
        ),
    ]
